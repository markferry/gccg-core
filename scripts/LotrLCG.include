#
#
# VARIABLES
# =========
#

# Number of cards in hand.
HANDSIZE=6;
# Size of columns of the decklist in pixels.
DECKBOX_SIZE=(20,220,110);
# minor version number for filter alogrithm
BOOK_FILTER_VERSION_MINOR=".0";
# default book sorting criteria.
BOOK_DEFAULT_SORT=("[age]","N[number]");

if(!port)
  port=29114;
if(server.name=="NO.DEFAULT.SERVER.FOR.THIS.GAME")
  server.name="gccg.servebeer.com";

product.image=(,);

# MENUS
# =====

FILTER_OPTIONS=(
 ("Card Types","1",(1,"[type]"))
);

GAME_MENU{"Tap a card"}=(
 (1,"Tap/Untap","middle click",""),
 (1,"Tap and keep tapped","","SetStayTapped()"),
 (1,"Invert as wounded","",'Send("Rotate",(object.number,180))'),
 (1,"Heal","",'Send("Rotate",(object.number,90))'),
);

GAME_MENU{"Current Deck Menu"}=(
 (1,"{hr}","",""),
 (1,"Create scenario deck","","CreateScenario()"),
 );

GAME_MENU{"Main Menu - Play"}=(
 (1,"{hr}","",""),
 (1,"Select scenario...","","SelectScenarioMenu()"),
 );

#
# SelectScenarioMenu() - Provide a list of scenarios to play.
#
def SelectScenarioMenu
{
  push(d);
  push(s);
  s=(,);
  for(d)(decks())
  {
    if(find("scenario",lc(d)))
      s=s+((d,"",'ImportScenario('+tostr(d)+')'),);
  }
  Submenu("Select Scenario",s);
  s=pop();
  d=pop();
}

#
# ImportScenario(file) - Import a deck and setup scenario.
#
def ImportScenario
{
  push(d);
  d=load_deck(ARG);
  d=ImportDeck(d);
  Send("SetScenario",(ARG,d{'encounter'},reverse(sort_by('[sequence]',d{'quest'},0))));
  d=pop();
}

# FUNCTIONS
# =========

#
# NewDeck() - Game specific creation of empty deck structure.
#
def NewDeck
{
  return((("deck",(,)),));
}

#
# CreateScenario() - Create scenario deck.
#
def CreateScenario
{
    decks{deck.name}=(,);  
    decks{deck.name}{"quest"}=(,);  
    decks{deck.name}{"encounter"}=(,);  
    RefreshCurrentDeck();
}

#
# InitializeGame() - Game specific initialization of game variables.
#
def InitializeGame
{
}

#
# StartGame() - What to do when game begins.
#
def StartGame
{
  net_send(server,("UploadDeck",decks{deck.name}));
  net_send(server,("ShuffleDeck",deck));
#  SearchStartingCards();
}

#
# HOOKS
# =====

#
# REDEFINED FUNCTIONS
# ===================

#
# ScoreToText(score structure) - Convert a score structure to string.
# 
def ScoreToText
{
  return("");
}

# MOUSE
# =====


# SPECIAL KEYS
# ============

# PLAYING CARDS
# =============

#
# LOCATION TABLES
# ===============

#
# InitializeLocationTables() - Fill tables for location algorithm (See Mtg.include for details).
#
def InitializeLocationTables
{
  rules.category=(,);

  rules.coordinate=(,);
}
